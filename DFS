
//https://www.hackerearth.com/practice/algorithms/graphs/depth-first-search/tutorial/

#include<bits/stdc++.h>
using namespace std;
int main() {
    int i;
    int a;
    int b;
    int x;
    int node;
    int edge;
    int source;
    stack <int> s;
	cin>>node>>edge;
	int visited[node] = {0};
    int count = node;
	int adjm[node][node]  = {0};
	for(i = 0; i < edge; i++) {
	    cin>>a>>b;
	    adjm[a-1][b-1] = 1;
	    adjm[b-1][a-1] = 1;
	  }
	cin>>source;
	s.push(source - 1);
	visited[source - 1] = 1;
	while(!s.empty()) {
	         x = s.top();
	        visited[x] = 1;
	        s.pop();
	            for(i = 0; i < node; i++) {
	                if((adjm[x][i] == 1) && (visited[i] != 1)) {
	                    b = i;
	                    s.push(b);
	                     visited[i] = 1;
    	                }
	            }
	   }
	    for(i = 0; i < node; i++) {
	        if(visited[i] == 1) count--;   
	        }
	    cout<<"\n"<<count;
	return 0;
}
